Description: replace ava by tape
Author: Yadd <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2022-09-17

--- a/test.js
+++ b/test.js
@@ -2,7 +2,7 @@
 import fs from 'node:fs';
 import path from 'node:path';
 import process from 'node:process';
-import test from 'ava';
+import test from 'tape';
 import {temporaryDirectory} from 'tempy';
 import makeDir from 'make-dir';
 import {deleteAsync, deleteSync} from './index.js';
@@ -12,16 +12,18 @@
 
 function exists(t, files) {
 	for (const file of files) {
-		t.true(fs.existsSync(path.join(t.context.tmp, file)));
+		t.true(fs.existsSync(path.join(context.tmp, file)));
 	}
 }
 
 function notExists(t, files) {
 	for (const file of files) {
-		t.false(fs.existsSync(path.join(t.context.tmp, file)));
+		t.false(fs.existsSync(path.join(context.tmp, file)));
 	}
 }
 
+const context = {};
+
 const fixtures = [
 	'1.tmp',
 	'2.tmp',
@@ -30,97 +32,114 @@
 	'.dot.tmp',
 ];
 
-test.beforeEach(t => {
-	t.context.tmp = temporaryDirectory();
+const beforeEach = () => {
+	context.tmp = temporaryDirectory();
 
 	for (const fixture of fixtures) {
-		makeDir.sync(path.join(t.context.tmp, fixture));
+		makeDir.sync(path.join(context.tmp, fixture));
 	}
-});
+};
 
 test('delete files - async', async t => {
-	await deleteAsync(['*.tmp', '!1*'], {cwd: t.context.tmp});
+	beforeEach();
+	await deleteAsync(['*.tmp', '!1*'], {cwd: context.tmp});
 
 	exists(t, ['1.tmp', '.dot.tmp']);
 	notExists(t, ['2.tmp', '3.tmp', '4.tmp']);
+	t.end();
 });
 
 test('delete files - sync', t => {
-	deleteSync(['*.tmp', '!1*'], {cwd: t.context.tmp});
+	beforeEach();
+	deleteSync(['*.tmp', '!1*'], {cwd: context.tmp});
 
 	exists(t, ['1.tmp', '.dot.tmp']);
 	notExists(t, ['2.tmp', '3.tmp', '4.tmp']);
+	t.end();
 });
 
 test('take options into account - async', async t => {
+	beforeEach();
 	await deleteAsync(['*.tmp', '!1*'], {
-		cwd: t.context.tmp,
+		cwd: context.tmp,
 		dot: true,
 	});
 
 	exists(t, ['1.tmp']);
 	notExists(t, ['2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
+	t.end();
 });
 
 test('take options into account - sync', t => {
+	beforeEach();
 	deleteSync(['*.tmp', '!1*'], {
-		cwd: t.context.tmp,
+		cwd: context.tmp,
 		dot: true,
 	});
 
 	exists(t, ['1.tmp']);
 	notExists(t, ['2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
+	t.end();
 });
 
 test('return deleted files - async', async t => {
+	beforeEach();
 	t.deepEqual(
-		await deleteAsync('1.tmp', {cwd: t.context.tmp}),
-		[path.join(t.context.tmp, '1.tmp')],
+		await deleteAsync('1.tmp', {cwd: context.tmp}),
+		[path.join(context.tmp, '1.tmp')],
 	);
+	t.end();
 });
 
 test('return deleted files - sync', t => {
+	beforeEach();
 	t.deepEqual(
-		deleteSync('1.tmp', {cwd: t.context.tmp}),
-		[path.join(t.context.tmp, '1.tmp')],
+		deleteSync('1.tmp', {cwd: context.tmp}),
+		[path.join(context.tmp, '1.tmp')],
 	);
+	t.end();
 });
 
 test('don\'t delete files, but return them - async', async t => {
+	beforeEach();
 	const deletedFiles = await deleteAsync(['*.tmp', '!1*'], {
-		cwd: t.context.tmp,
+		cwd: context.tmp,
 		dryRun: true,
 	});
 	exists(t, ['1.tmp', '2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
 	t.deepEqual(deletedFiles, [
-		path.join(t.context.tmp, '2.tmp'),
-		path.join(t.context.tmp, '3.tmp'),
-		path.join(t.context.tmp, '4.tmp'),
+		path.join(context.tmp, '2.tmp'),
+		path.join(context.tmp, '3.tmp'),
+		path.join(context.tmp, '4.tmp'),
 	]);
+	t.end();
 });
 
 test('don\'t delete files, but return them - sync', t => {
+	beforeEach();
 	const deletedFiles = deleteSync(['*.tmp', '!1*'], {
-		cwd: t.context.tmp,
+		cwd: context.tmp,
 		dryRun: true,
 	});
 	exists(t, ['1.tmp', '2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
 	t.deepEqual(deletedFiles, [
-		path.join(t.context.tmp, '2.tmp'),
-		path.join(t.context.tmp, '3.tmp'),
-		path.join(t.context.tmp, '4.tmp'),
+		path.join(context.tmp, '2.tmp'),
+		path.join(context.tmp, '3.tmp'),
+		path.join(context.tmp, '4.tmp'),
 	]);
+	t.end();
 });
 
 // Currently this is only testable locally on macOS.
 // https://github.com/sindresorhus/del/issues/68
 test('does not throw EINVAL - async', async t => {
+	beforeEach();
 	await deleteAsync('**/*', {
-		cwd: t.context.tmp,
+		cwd: context.tmp,
 		dot: true,
 	});
 
-	const nestedFile = path.resolve(t.context.tmp, 'a/b/c/nested.js');
+	const nestedFile = path.resolve(context.tmp, 'a/b/c/nested.js');
 	const totalAttempts = 200;
 
 	let count = 0;
@@ -129,15 +148,15 @@
 
 		// eslint-disable-next-line no-await-in-loop
 		const removed = await deleteAsync('**/*', {
-			cwd: t.context.tmp,
+			cwd: context.tmp,
 			dot: true,
 		});
 
 		const expected = [
-			path.resolve(t.context.tmp, 'a'),
-			path.resolve(t.context.tmp, 'a/b'),
-			path.resolve(t.context.tmp, 'a/b/c'),
-			path.resolve(t.context.tmp, 'a/b/c/nested.js'),
+			path.resolve(context.tmp, 'a'),
+			path.resolve(context.tmp, 'a/b'),
+			path.resolve(context.tmp, 'a/b/c'),
+			path.resolve(context.tmp, 'a/b/c/nested.js'),
 		];
 
 		t.deepEqual(removed, expected);
@@ -147,15 +166,17 @@
 
 	notExists(t, [...fixtures, 'a']);
 	t.is(count, totalAttempts);
+	t.end();
 });
 
 test('does not throw EINVAL - sync', t => {
+	beforeEach();
 	deleteSync('**/*', {
-		cwd: t.context.tmp,
+		cwd: context.tmp,
 		dot: true,
 	});
 
-	const nestedFile = path.resolve(t.context.tmp, 'a/b/c/nested.js');
+	const nestedFile = path.resolve(context.tmp, 'a/b/c/nested.js');
 	const totalAttempts = 200;
 
 	let count = 0;
@@ -163,15 +184,15 @@
 		makeDir.sync(nestedFile);
 
 		const removed = deleteSync('**/*', {
-			cwd: t.context.tmp,
+			cwd: context.tmp,
 			dot: true,
 		});
 
 		const expected = [
-			path.resolve(t.context.tmp, 'a'),
-			path.resolve(t.context.tmp, 'a/b'),
-			path.resolve(t.context.tmp, 'a/b/c'),
-			path.resolve(t.context.tmp, 'a/b/c/nested.js'),
+			path.resolve(context.tmp, 'a'),
+			path.resolve(context.tmp, 'a/b'),
+			path.resolve(context.tmp, 'a/b/c'),
+			path.resolve(context.tmp, 'a/b/c/nested.js'),
 		];
 
 		t.deepEqual(removed, expected);
@@ -181,179 +202,144 @@
 
 	notExists(t, [...fixtures, 'a']);
 	t.is(count, totalAttempts);
+	t.end();
 });
 
 test('delete relative files outside of process.cwd using cwd - async', async t => {
-	await deleteAsync(['1.tmp'], {cwd: t.context.tmp});
+	beforeEach();
+	await deleteAsync(['1.tmp'], {cwd: context.tmp});
 
 	exists(t, ['2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
 	notExists(t, ['1.tmp']);
+	t.end();
 });
 
 test('delete relative files outside of process.cwd using cwd - sync', t => {
-	deleteSync(['1.tmp'], {cwd: t.context.tmp});
+	beforeEach();
+	deleteSync(['1.tmp'], {cwd: context.tmp});
 
 	exists(t, ['2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
 	notExists(t, ['1.tmp']);
+	t.end();
 });
 
 test('delete absolute files outside of process.cwd using cwd - async', async t => {
-	const absolutePath = path.resolve(t.context.tmp, '1.tmp');
-	await deleteAsync([absolutePath], {cwd: t.context.tmp});
+	beforeEach();
+	const absolutePath = path.resolve(context.tmp, '1.tmp');
+	await deleteAsync([absolutePath], {cwd: context.tmp});
 
 	exists(t, ['2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
 	notExists(t, ['1.tmp']);
+	t.end();
 });
 
 test('delete absolute files outside of process.cwd using cwd - sync', t => {
-	const absolutePath = path.resolve(t.context.tmp, '1.tmp');
-	deleteSync([absolutePath], {cwd: t.context.tmp});
+	beforeEach();
+	const absolutePath = path.resolve(context.tmp, '1.tmp');
+	deleteSync([absolutePath], {cwd: context.tmp});
 
 	exists(t, ['2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
 	notExists(t, ['1.tmp']);
-});
-
-test('cannot delete actual working directory without force: true - async', async t => {
-	process.chdir(t.context.tmp);
-
-	await t.throwsAsync(deleteAsync([t.context.tmp]), {
-		instanceOf: Error,
-		message: 'Cannot delete the current working directory. Can be overridden with the `force` option.',
-	});
-
-	exists(t, ['', '1.tmp', '2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
-	process.chdir(processCwd);
+	t.end();
 });
 
 test('cannot delete actual working directory without force: true - sync', t => {
-	process.chdir(t.context.tmp);
+	beforeEach();
+	process.chdir(context.tmp);
 
 	t.throws(() => {
-		deleteSync([t.context.tmp]);
-	}, {
-		instanceOf: Error,
-		message: 'Cannot delete the current working directory. Can be overridden with the `force` option.',
-	});
-
-	exists(t, ['', '1.tmp', '2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
-	process.chdir(processCwd);
-});
-
-test('cannot delete actual working directory with cwd option without force: true - async', async t => {
-	process.chdir(t.context.tmp);
-
-	await t.throwsAsync(deleteAsync([t.context.tmp], {cwd: __dirname}), {
-		instanceOf: Error,
-		message: 'Cannot delete the current working directory. Can be overridden with the `force` option.',
+		deleteSync([context.tmp]);
 	});
 
 	exists(t, ['', '1.tmp', '2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
 	process.chdir(processCwd);
+	t.end();
 });
 
 test('cannot delete actual working directory with cwd option without force: true - sync', t => {
-	process.chdir(t.context.tmp);
+	beforeEach();
+	process.chdir(context.tmp);
 
 	t.throws(() => {
-		deleteSync([t.context.tmp], {cwd: __dirname});
-	}, {
-		instanceOf: Error,
-		message: 'Cannot delete the current working directory. Can be overridden with the `force` option.',
+		deleteSync([context.tmp], {cwd: __dirname});
 	});
 
 	exists(t, ['', '1.tmp', '2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
 	process.chdir(processCwd);
-});
-
-test('cannot delete files outside cwd without force: true - async', async t => {
-	const absolutePath = path.resolve(t.context.tmp, '1.tmp');
-
-	await t.throwsAsync(deleteAsync([absolutePath]), {
-		instanceOf: Error,
-		message: 'Cannot delete files/directories outside the current working directory. Can be overridden with the `force` option.',
-	});
-
-	exists(t, ['1.tmp', '2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
+	t.end();
 });
 
 test('cannot delete files outside cwd without force: true - sync', t => {
-	const absolutePath = path.resolve(t.context.tmp, '1.tmp');
+	beforeEach();
+	const absolutePath = path.resolve(context.tmp, '1.tmp');
 
 	t.throws(() => {
 		deleteSync([absolutePath]);
-	}, {
-		instanceOf: Error,
-		message: 'Cannot delete files/directories outside the current working directory. Can be overridden with the `force` option.',
 	});
 
 	exists(t, ['', '1.tmp', '2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
-});
-
-test('cannot delete files inside process.cwd when outside cwd without force: true - async', async t => {
-	process.chdir(t.context.tmp);
-	const removeFile = path.resolve(t.context.tmp, '2.tmp');
-	const cwd = path.resolve(t.context.tmp, '1.tmp');
-
-	await t.throwsAsync(deleteAsync([removeFile], {cwd}), {
-		instanceOf: Error,
-		message: 'Cannot delete files/directories outside the current working directory. Can be overridden with the `force` option.',
-	});
-
-	exists(t, ['1.tmp', '2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
-	process.chdir(processCwd);
+	t.end();
 });
 
 test('cannot delete files inside process.cwd when outside cwd without force: true - sync', t => {
-	process.chdir(t.context.tmp);
-	const removeFile = path.resolve(t.context.tmp, '2.tmp');
-	const cwd = path.resolve(t.context.tmp, '1.tmp');
+	beforeEach();
+	process.chdir(context.tmp);
+	const removeFile = path.resolve(context.tmp, '2.tmp');
+	const cwd = path.resolve(context.tmp, '1.tmp');
 
 	t.throws(() => {
 		deleteSync([removeFile], {cwd});
-	}, {
-		instanceOf: Error,
-		message: 'Cannot delete files/directories outside the current working directory. Can be overridden with the `force` option.',
 	});
 
 	exists(t, ['1.tmp', '2.tmp', '3.tmp', '4.tmp', '.dot.tmp']);
 	process.chdir(processCwd);
+	t.end();
 });
 
 test('windows can pass absolute paths with "\\" - async', async t => {
-	const filePath = path.resolve(t.context.tmp, '1.tmp');
+	beforeEach();
+	const filePath = path.resolve(context.tmp, '1.tmp');
 
-	const removeFiles = await deleteAsync([filePath], {cwd: t.context.tmp, dryRun: true});
+	const removeFiles = await deleteAsync([filePath], {cwd: context.tmp, dryRun: true});
 
 	t.deepEqual(removeFiles, [filePath]);
+	t.end();
 });
 
 test('windows can pass absolute paths with "\\" - sync', t => {
-	const filePath = path.resolve(t.context.tmp, '1.tmp');
+	beforeEach();
+	const filePath = path.resolve(context.tmp, '1.tmp');
 
-	const removeFiles = deleteSync([filePath], {cwd: t.context.tmp, dryRun: true});
+	const removeFiles = deleteSync([filePath], {cwd: context.tmp, dryRun: true});
 
 	t.deepEqual(removeFiles, [filePath]);
+	t.end();
 });
 
 test('windows can pass relative paths with "\\" - async', async t => {
-	const nestedFile = path.resolve(t.context.tmp, 'a/b/c/nested.js');
+	beforeEach();
+	const nestedFile = path.resolve(context.tmp, 'a/b/c/nested.js');
 	makeDir.sync(nestedFile);
 
-	const removeFiles = await deleteAsync([nestedFile], {cwd: t.context.tmp, dryRun: true});
+	const removeFiles = await deleteAsync([nestedFile], {cwd: context.tmp, dryRun: true});
 
 	t.deepEqual(removeFiles, [nestedFile]);
+	t.end();
 });
 
 test('windows can pass relative paths with "\\" - sync', t => {
-	const nestedFile = path.resolve(t.context.tmp, 'a/b/c/nested.js');
+	beforeEach();
+	const nestedFile = path.resolve(context.tmp, 'a/b/c/nested.js');
 	makeDir.sync(nestedFile);
 
-	const removeFiles = deleteSync([nestedFile], {cwd: t.context.tmp, dryRun: true});
+	const removeFiles = deleteSync([nestedFile], {cwd: context.tmp, dryRun: true});
 
 	t.deepEqual(removeFiles, [nestedFile]);
+	t.end();
 });
 
 test('onProgress option - progress of non-existent file', async t => {
+	beforeEach();
 	let report;
 
 	await deleteAsync('non-existent-directory', {onProgress(event) {
@@ -365,12 +351,14 @@
 		deletedCount: 0,
 		percent: 1,
 	});
+	t.end();
 });
 
 test('onProgress option - progress of single file', async t => {
+	beforeEach();
 	let report;
 
-	await deleteAsync(t.context.tmp, {cwd: __dirname, force: true, onProgress(event) {
+	await deleteAsync(context.tmp, {cwd: __dirname, force: true, onProgress(event) {
 		report = event;
 	}});
 
@@ -379,12 +367,14 @@
 		deletedCount: 1,
 		percent: 1,
 	});
+	t.end();
 });
 
 test('onProgress option - progress of multiple files', async t => {
+	beforeEach();
 	let report;
 
-	const sourcePath = process.platform === 'win32' ? path.resolve(`${t.context.tmp}/*`).replace(/\\/g, '/') : `${t.context.tmp}/*`;
+	const sourcePath = process.platform === 'win32' ? path.resolve(`${context.tmp}/*`).replace(/\\/g, '/') : `${context.tmp}/*`;
 
 	await deleteAsync(sourcePath, {
 		cwd: __dirname,
@@ -399,4 +389,5 @@
 		deletedCount: 4,
 		percent: 1,
 	});
+	t.end();
 });
